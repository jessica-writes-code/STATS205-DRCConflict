setwd('/Users/jmoore523/Dropbox/Graduate School/Q3 - Spring 2016/STATS205/Project/STATS205-DRCConflict')
input <- file.path(".", "Input")
output <- file.path(".", "Output")
temp <- file.path(".", "Temp")
### Load & Clean up Data
# Load Data
acled <- readShapePoints(paste0("input/ACLED/ACLED_Version6_Shpfile.shp"))
drc <- readShapePoly(paste0("input/DRC Outlines/COD_adm0.shp"))
# Subset to only events in the DRC
### ACLED
unique(acled.drc$COUNTRY)
unique(acled$COUNTRY)
acled.drc <- subset(acled, COUNTRY=="Democratic Republic of Congo")
format(acled.drc$EVENT_DATE, "%m")
acled.drc$month_std <- as.numeric(format(acled.drc$EVENT_DATE, "%m"))
unique(acled.drc$EVENT)
unique(acled.drc$EVENT_TYPE)
acled.drc <- subset(acled.drc, acled.drc$EVENT_TYPE!="Non-violent transfer of territory" & acled.drc$EVENT_TYPE!="Headquarters or base established" & acled.drc$EVENT_TYPE!="Remote violence" & acled.drc$EVENT_TYPE!="Strategic development")
# Categorize event types
acled.drc$event_type_std <- as.character(acled.drc$EVENT_TYPE)
acled.drc$event_type_std[acled.drc$EVENT_TYPE=="Battle-Government regains territory" | acled.drc$EVENT_TYPE=="Battle-No change of territory" | acled.drc$EVENT_TYPE=="Battle-Non-state actor overtakes territory"] <- "Battle"
acled.drc$event_type <- factor(acled.drc$event_type)
acled.drc$event_type <- as.factor(acled.drc$event_type)
acled.drc$event_type_std <- as.factor(acled.drc$event_type_std)
unique(acled.drc$event_type_std)
source('~/.active-rstudio-document', echo=TRUE)
### Set up coding environment
# Clear Data Sets & Plots
rm(list=ls())
# Load libraries
library(maptools)
library(xlsx)
# Map paths
setwd('/Users/jmoore523/Dropbox/Graduate School/Q3 - Spring 2016/STATS205/Project/STATS205-DRCConflict')
input <- file.path(".", "Input")
output <- file.path(".", "Output")
temp <- file.path(".", "Temp")
# Load data
load(paste0(temp,"/acleddrc.R"))
load(paste0(temp,"/drc.R"))
### Summary Statistics
acled.drc$count <- 1
## No. Events Per Month (2014-2015)
acled.drc1415 <- subset(acled.drc, YEAR==2014 | YEAR==2015)
acled.drc1415.counts <- aggregate(cbind(count, FATALITIES)~YEAR+month_std+event_type_std, data=acled.drc1415, sum)
names(acled.drc1415.counts) <- c("year","month_std","event_type_std", "event_count","fatalities")
View(acled.drc1415.counts)
View(acled.drc1415.counts)
sum(acled.drc1415.counts$fatalities)
sum(acled.drc1415.counts$event_count)
acled.drc1415.counts <- aggregate(cbind(count)~YEAR+month_std+event_type_std, data=acled.drc1415, sum)
sum(acled.drc1415.counts$event_count)
View(acled.drc1415.counts)
names(acled.drc1415.counts) <- c("year","month_std","event_type_std", "event_count")
sum(acled.drc1415.counts$event_count)
acled.drc1415 <- subset(acled.drc, YEAR==2014 | YEAR==2015)
acled.drc1415.counts <- aggregate(cbind(count, FATALITIES)~YEAR+month_std+event_type_std, data=acled.drc1415, sum)
names(acled.drc1415.counts) <- c("year","month_std","event_type_std", "event_count","fatalities")
acled.drc1415.counts$month_order_std <- acled.drc1415.counts$month_std
acled.drc1415.counts$month_order_std[acled.drc1415.counts$year==2015] <- acled.drc1415.counts$month_order_std[acled.drc1415.counts$year==2015] + 12
acled.drc1415.counts <- acled.drc1415.counts[order(acled.drc1415.counts$month_order_std),]
# Table
write.xlsx(acled.drc1415.counts, file=paste0(output,"/Data Summaries.xlsx"), sheetName="Event Count 1415", col.names=TRUE, row.names=FALSE, append=FALSE)
# Graph - Counts
battles <- subset(acled.drc1415.counts, event_type_std == "Battle")
riots <- subset(acled.drc1415.counts, event_type_std == "Riots/Protests")
vacs <- subset(acled.drc1415.counts, event_type_std == "Violence against civilians")
par(mar=c(3,3.5,4.1,2.1))
par(las=1)
plot(battles$month_order_std, battles$event_count, type="l", lwd=2, xlab = "Month", ylim=c(0,55), xaxt='n', col="red", ann=FALSE)
axis(1, at=c(1,6,12,18,24), labels=c("Jan.2014","Jun.2014","Dec.2014","Jun.2015","Dec.2015"), cex.axis=1.10)
title(ylab = "Event Count", line = 2.0, cex.lab=1.20)
lines(riots$month_order_std, riots$event_count, type="l", lwd=2, col="blue")
lines(vacs$month_order_std, vacs$event_count, lwd=2, col="green")
par(xpd=TRUE)
legend(8, 65, c("Battles","Riots/Protests","Violence Against Civilians"), lwd=c(2,2,2), col=c("red","blue","green"))
acled.drc2014 <- subset(acled.drc, YEAR==2014)
map.conf <- function(picname, df, color) {
png(paste0(output,'/',picname,'.png'))
par(mar=c(1,1,1,2))
plot(drc, xlim=c(21,21.025), ylim=c(-13,6))
plot(df, pch=20, cex=.25, add=TRUE, col = color)
dev.off()
}
map.conf("AllConflicts2014",acled.drc2014, "black")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
d <- 0.1
## Set different sets starting values for predictors
num.wts <- 58*best.units + best.units + 1
wts <- runif(num.wts, min=-0.5, max=0.5)
## Fit NN
sink("/dev/null")
nnet.cur <- nnet(emailtype ~ ., data=spam.train, size = best.units, Wts = wts, decay = d)
sink()
nnet.cur <- nnet(emailtype ~ ., data=spam.train, size = best.units, Wts = wts, decay = d)
pred.curr <- predict(nnet.cur, newdata=spam.test, type='raw')
pred.final.bin <- rep(0, length(pred.curr))
pred.final.bin[pred.curr > 0.5] <- 1
misclass.table <- table(spam.test$emailtype, pred.final.bin)
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
(27+58)/(889+560)
(27+58)/(889+560+27+58)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pred.final.bin <- rep(0, length(pred.best))
pred.final.bin[pred.final > 0.85] <- 1
pred.final.bin[pred.best > 0.85] <- 1
## Record misclassification error
misclass.table <- table(spam.test$emailtype, pred.final.bin, dnn=c("Actual","Predicted"))
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
misclass.rate
misclass.rate.nonspam <- (misclass.table[1,2])/sum(misclass.table[1,])
misclass.rate.nonspam
misclass.rate.spam <- (misclass.table[2,1])/sum(misclass.table[2,])
misclass.rate.spam
pred.final.bin <- rep(0, length(pred.best))
pred.final.bin[pred.best > 0.90] <- 1
## Record misclassification error
misclass.table <- table(spam.test$emailtype, pred.final.bin, dnn=c("Actual","Predicted"))
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
misclass.rate
misclass.rate.nonspam <- (misclass.table[1,2])/sum(misclass.table[1,])
misclass.rate.nonspam
pred.final.bin <- rep(0, length(pred.best))
pred.final.bin[pred.best > 0.95] <- 1
## Record misclassification error
misclass.table <- table(spam.test$emailtype, pred.final.bin, dnn=c("Actual","Predicted"))
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
misclass.rate
misclass.rate.nonspam <- (misclass.table[1,2])/sum(misclass.table[1,])
misclass.rate.nonspam
pred.final.bin <- rep(0, length(pred.best))
pred.final.bin[pred.best > 0.98] <- 1
## Record misclassification error
misclass.table <- table(spam.test$emailtype, pred.final.bin, dnn=c("Actual","Predicted"))
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
misclass.rate
misclass.rate.nonspam <- (misclass.table[1,2])/sum(misclass.table[1,])
misclass.rate.nonspam
pred.final.bin <- rep(0, length(pred.best))
pred.final.bin[pred.best > 0.97] <- 1
## Record misclassification error
misclass.table <- table(spam.test$emailtype, pred.final.bin, dnn=c("Actual","Predicted"))
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
misclass.rate
misclass.rate.nonspam <- (misclass.table[1,2])/sum(misclass.table[1,])
misclass.rate.nonspam
pred.final.bin <- rep(0, length(pred.best))
pred.final.bin[pred.best > 0.96] <- 1
## Record misclassification error
misclass.table <- table(spam.test$emailtype, pred.final.bin, dnn=c("Actual","Predicted"))
misclass.table
misclass.rate <- (misclass.table[1,2] + misclass.table[2,1])/sum(misclass.table)
misclass.rate
misclass.rate.nonspam <- (misclass.table[1,2])/sum(misclass.table[1,])
misclass.rate.nonspam
source('~/.active-rstudio-document', echo=TRUE)
nnet.best$nsunits
nnet.best$decay
nnet.best$nunits
nnet.best$n
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length(unique(fb$firstnode))
temp1 <- unique(fb$firstnode)
temp2 <- unique(fb$firstnode)
temp2 <- unique(fb$secondnode)
temp1 == temp2
length(unique(fb$firstnode))
length(unique(fb$secondnode))
length(unique(c(unique(fb$secondnode),unique(fb$firstnode)))
)
# Load data
fb <- read.table(paste0(input,"/facebook_combined.txt"), stringsAsFactors = FALSE)
names(fb) <- c("firstnode","secondnode")
# Add 1 to each node value, because
# Facebook Indexes Starting at 0
# and R Indexes Starting at 1
fb$firstnode <- fb$firstnode + 1
fb$secondnode <- fb$secondnode + 1
# Create adjacency matrix
## Set up empty matrix
nodes <- length(unique(c(unique(fb$secondnode),unique(fb$firstnode))))
fb.adj <- matrix(rep(0,nodes^2), nrow=nodes, ncol=nodes)
rownames(fb.adj) <- seq(1,nodes)
colnames(fb.adj) <- seq(1,nodes)
## Fill (symmetrically) with edge indicators
for (k in 1:nodes) {
i <- fb[k,]$firstnode
j <- fb[k,]$secondnode
fb.adj[i,j] <- 1
fb.adj[j,i] <- 1
}
# Limit to Top 500 Nodes, by Empirical Degree
## Count empirical degree
fb.empdeg <- apply(fb.adj, 1, sum)
fb.empdeg.order <- names(sort(fb.empdeg, decreasing=TRUE))
## Subset adjacency matrix
n <- 500
fb.adj <- fb.adj[,fb.empdeg.order]
fb.adj <- fb.adj[fb.empdeg.order,]
fb.adj <- fb.adj[1:n, 1:n]
# Save original matrix
fb.adj.orig <- fb.adj
unique(fb$firstnode)
# Load data
fb <- read.table(paste0(input,"/facebook_combined.txt"), stringsAsFactors = FALSE)
names(fb) <- c("firstnode","secondnode")
# Add 1 to each node value, because
# Facebook Indexes Starting at 0
# and R Indexes Starting at 1
fb$firstnode <- fb$firstnode + 1
fb$secondnode <- fb$secondnode + 1
# Create adjacency matrix
## Set up empty matrix
nodes <- length(unique(c(unique(fb$secondnode),unique(fb$firstnode))))
fb.adj <- matrix(rep(0,nodes^2), nrow=nodes, ncol=nodes)
rownames(fb.adj) <- seq(1,nodes)
colnames(fb.adj) <- seq(1,nodes)
## Fill (symmetrically) with edge indicators
for (k in 1:nrow(fb.adj)) {
i <- fb[k,]$firstnode
j <- fb[k,]$secondnode
fb.adj[i,j] <- 1
fb.adj[j,i] <- 1
}
# Limit to Top 500 Nodes, by Empirical Degree
## Count empirical degree
fb.empdeg <- apply(fb.adj, 1, sum)
fb.empdeg.order <- names(sort(fb.empdeg, decreasing=TRUE))
## Subset adjacency matrix
n <- 500
fb.adj <- fb.adj[,fb.empdeg.order]
fb.adj <- fb.adj[fb.empdeg.order,]
fb.adj <- fb.adj[1:n, 1:n]
# Save original matrix
fb.adj.orig <- fb.adj
# Load data
fb <- read.table(paste0(input,"/facebook_combined.txt"), stringsAsFactors = FALSE)
names(fb) <- c("firstnode","secondnode")
# Add 1 to each node value, because
# Facebook Indexes Starting at 0
# and R Indexes Starting at 1
fb$firstnode <- fb$firstnode + 1
fb$secondnode <- fb$secondnode + 1
# Create adjacency matrix
## Set up empty matrix
nodes <- length(unique(c(unique(fb$secondnode),unique(fb$firstnode))))
fb.adj <- matrix(rep(0,nodes^2), nrow=nodes, ncol=nodes)
rownames(fb.adj) <- seq(1,nodes)
colnames(fb.adj) <- seq(1,nodes)
## Fill (symmetrically) with edge indicators
for (k in 1:nrow(fb)) {
i <- fb[k,]$firstnode
j <- fb[k,]$secondnode
fb.adj[i,j] <- 1
fb.adj[j,i] <- 1
}
# Limit to Top 500 Nodes, by Empirical Degree
## Count empirical degree
fb.empdeg <- apply(fb.adj, 1, sum)
fb.empdeg.order <- names(sort(fb.empdeg, decreasing=TRUE))
## Subset adjacency matrix
n <- 500
fb.adj <- fb.adj[,fb.empdeg.order]
fb.adj <- fb.adj[fb.empdeg.order,]
fb.adj <- fb.adj[1:n, 1:n]
# Save original matrix
fb.adj.orig <- fb.adj
View(fb.adj)
sum(fb.adj[,1])
sum(fb.adj[,2])
sum(fb.adj[,3])
fb.empdeg
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?sure.thresh
source('~/.active-rstudio-document', echo=TRUE)
?hybrid.thresh
source('~/.active-rstudio-document', echo=TRUE)
t <- (2 + eta)*sqrt(n*.01)
min(s)
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?get
datatemp <- get("acled.drc2014.latlon")
source('~/.active-rstudio-document', echo=TRUE)
datatemp <- get("acled.drc2014.latlon")
datatemp == acled.drc2014.latlon
source('~/.active-rstudio-document', echo=TRUE)
eventlist <- c("", "b.", "r." "v.")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Identify Bandwidth Type
bwtype <- bwlist[i]
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth.",eventlist[j],bwtype))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwtype == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Make File Name
savename <- paste0(eventlist.names[j],bwlist.names[i])
# Contour Plot
plot.contours.kde(data=df, bandwidth.matrix=bwmatrix, name=savename)
}
}
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Identify Bandwidth Type
bwtype <- bwlist[i]
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth",eventlist[j],bwtype))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwtype == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Make File Name
savename <- paste0(eventlist.names[j],bwlist.names[i])
# Contour Plot
plot.contours.kde(data=df, bandwidth.matrix=bwmatrix, name=savename)
}
}
## List Event Subsets & Labels
eventlist <- c(".", ".b.", ".r.", ".v.")
eventlist.names <- c("AllData", "Battles", "Riots", "VAC")
## List Bandwidths & Labels
bwlist <- c("Hpi", "Hlscv", "Hlscv.RN", "Hbcv1", "Hbcv2", "Hns")
bwlist.names <- c("PI","LSCV","LSCVRN", "BCV1", "BCV2","NS")
## Loop Through Event Subsets & Bandwidth Types
## Generate Contour Plots for Each Combination
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Identify Bandwidth Type
bwtype <- bwlist[i]
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth",eventlist[j],bwtype))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwtype == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Make File Name
savename <- paste0(eventlist.names[j],bwlist.names[i])
# Contour Plot
plot.contours.kde(data=df, bandwidth.matrix=bwmatrix, name=savename)
}
}
?assign
source('~/.active-rstudio-document', echo=TRUE)
## List Event Subsets & Labels
eventlist <- c(".", ".b.", ".r.", ".v.")
eventlist.names <- c("AllData", "Battles", "Riots", "VAC")
## List Bandwidths & Labels
bwlist <- c("Hpi", "Hlscv", "Hlscv.RN", "Hbcv1", "Hbcv2", "Hns")
bwlist.names <- c("PI","LSCV","LSCVRN", "BCV1", "BCV2","NS")
## Compute Density Estimates by Grid ID
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth.",eventlist[j],bwlist[i]))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwtype == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Create Density Estimates for Square Centroids
dens <- kde(x=df, H=bwmatrix, eval.points=drcgrid.centroids.latlon)
# Identify Estimates by Square ID
dens.df <- cbind(dens$estimate,ID)
# Rename & Save Object
dens.name <- paste0("estimates.",subset,bwlist[i])
assign(dens.name, dens.df)
save(get(dens.name), file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
}
}
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth",eventlist[j],bwlist[i]))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwtype == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Create Density Estimates for Square Centroids
dens <- kde(x=df, H=bwmatrix, eval.points=drcgrid.centroids.latlon)
# Identify Estimates by Square ID
dens.df <- cbind(dens$estimate,ID)
# Rename & Save Object
dens.name <- paste0("estimates.",subset,bwlist[i])
assign(dens.name, dens.df)
save(get(dens.name), file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
}
}
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth",eventlist[j],bwlist[i]))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwlist[i] == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Create Density Estimates for Square Centroids
dens <- kde(x=df, H=bwmatrix, eval.points=drcgrid.centroids.latlon)
# Identify Estimates by Square ID
dens.df <- cbind(dens$estimate,ID)
# Rename & Save Object
dens.name <- paste0("estimates.",subset,bwlist[i])
assign(dens.name, dens.df)
save(get(dens.name), file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
}
}
i < 1
i <- 1
j <- 1
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth",eventlist[j],bwlist[i]))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwlist[i] == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Create Density Estimates for Square Centroids
dens <- kde(x=df, H=bwmatrix, eval.points=drcgrid.centroids.latlon)
dens.df <- cbind(dens$estimate,ID)
dens.name <- paste0("estimates.",subset,bwlist[i])
dens.name <- paste0("estimates.",eventlist[j],bwlist[i])
assign(dens.name, dens.df)
save(get(dens.name), file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
dens.name <- paste0("estimates",eventlist[j],bwlist[i])
assign(dens.name, dens.df)
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
# Get Bandwidth Matrix
bwmatrix <- get(paste0("bandwidth",eventlist[j],bwlist[i]))
# If Bandwidth is LSCV-R, Get Adjusted Data
# Otherwise, Get Regular Data
if (bwlist[i] == "Hlscv.RN") {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon.RN"))
}
else {
df <- get(paste0("acled.drc2014",eventlist[j],"latlon"))
}
# Create Density Estimates for Square Centroids
dens <- kde(x=df, H=bwmatrix, eval.points=drcgrid.centroids.latlon)
# Identify Estimates by Square ID
dens.df <- cbind(dens$estimate,ID)
# Rename & Save Object
dens.name <- paste0("estimates",eventlist[j],bwlist[i])
assign(dens.name, dens.df)
save(dens.df, file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for (j in 1:length(eventlist)) {
for (i in 1:length(bwlist)) {
dens.df <- load(file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
dens.name <- paste0("estimates",eventlist[j],bwlist[i])
assign(dens.name, dens.df)
}
}
dens.df <- load(file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
load(file=paste0(temp,"/Estimates",eventlist.names[j],bwlist[i],".R"))
dens.name <- paste0("estimates",eventlist[j],bwlist[i])
assign(dens.name, dens.df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
vac.auc
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
